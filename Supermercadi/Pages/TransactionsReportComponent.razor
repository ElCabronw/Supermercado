@page "/transaction"
@inject IGetTransactionsUseCase GetTransactionsUseCase
@inject IJSRuntime JSRuntime
    <div id="printarea">
        <div class="row">
            <div class="col-2">
                <label for="cashier">Cashier Name</label>
                <input type="text" id="cashier" class="form-control" @bind-value="cashierName" />
            </div>
            <div class="col-3">
                <label for="startDate">Start Date</label>
                <input type="date" id="startDate" class="form-control" @bind-value="startDate" />
            </div>
            <div class="col-3">
                <label for="endDate">End Date</label>
                <input type="date" id="endDate" class="form-control" @bind-value="endDate" />
            </div>
            <div class="col-2">
                <label>&nbsp;</label>
                <button type="button" class="btn btn-primary form-control" @onclick="LoadTransactions">Search</button>
            </div>
            <div class="col-2">
                <label>&nbsp;</label>
                <button type="button" class="btn btn-primary form-control" @onclick="PrintReport">Print</button>
            </div>
        </div>
        <br />

        @if (transactions != null)
        {

            <table class="table">
                <thead>
                    <tr>
                        <th>Date Time</th>
                        <th>Cashier Name</th>
                        <th>Product Nam</th>
                        <th>Qty Before</th>
                        <th>Qty Sold</th>
                        <th>Qty After</th>
                        <th>Price</th>
                        <th>Sold Amt</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var transaction in transactions)
                    {
                        <tr>
                            <td>@transaction.TimeStamp.ToString("dd/MM/yyyy hh:mm")</td>
                            <td>@transaction.CashierName</td>
                            <td>@transaction.ProductName</td>
                            <td>@transaction.BeforeQty</td>
                            <td>@transaction.SoldQty</td>
                            <td>@(transaction.BeforeQty - transaction.SoldQty)</td>
                            <td style="text-align:right">@(string.Format("{0:C}",transaction.Price))</td>
                            <td style="text-align:right">@(string.Format("{0:C}",transaction.SoldQty * transaction.Price))</td>
                        </tr>
                    }
                </tbody>
                <tfoot>
                    <tr>
                        <td colspan="6">&nbsp;</td>
                        <td style="text-align:right">
                            <b>Grand Total:</b>
                        </td>
                        <td style="text-align:right">
                            <b>
                                @(string.Format("{0:C}",transactions.Sum(x => x.Price * x.SoldQty)))
                            </b>
                        </td>
                    </tr>
                </tfoot>
            </table>

        }
    </div>



    @code {
        private string cashierName;
        private DateTime startDate;
        private DateTime endDate;
        private IEnumerable<Transaction> transactions;


        protected override void OnInitialized()
        {
            base.OnInitialized();

            startDate = DateTime.Today;
            endDate = DateTime.Today;
        }

        private void LoadTransactions()
        {
            transactions = GetTransactionsUseCase.Execute(cashierName, startDate, endDate);
        }

        private void PrintReport()
        {
            JSRuntime.InvokeVoidAsync("print");
        }


    }
